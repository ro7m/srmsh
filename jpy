from fastapi import FastAPI, HTTPException
from typing import Optional, Dict
import duckdb
import pandas as pd
from datetime import datetime
import time
import boto3

class STSManager:
    def __init__(self, role_arn: str, region: str = 'us-east-1', session_name: str = 'DuckDBSession'):
        """Manage STS credentials for assuming IAM roles"""
        self.role_arn = role_arn
        self.region = region
        self.session_name = session_name
        self.credentials = None
        self.expiration = None
    
    def get_credentials(self):
        """Get temporary credentials using STS AssumeRole"""
        if self._should_refresh():
            # Create an STS client
            sts_client = boto3.client('sts', region_name=self.region)
            
            # Assume the IAM role
            response = sts_client.assume_role(
                RoleArn=self.role_arn,
                RoleSessionName=self.session_name,
                DurationSeconds=3600  # 1 hour
            )
            
            # Extract the temporary credentials
            self.credentials = response['Credentials']
            self.expiration = self.credentials['Expiration']
            
        return {
            'aws_access_key_id': self.credentials['AccessKeyId'],
            'aws_secret_access_key': self.credentials['SecretAccessKey'],
            'aws_session_token': self.credentials['SessionToken']
        }
    
    def _should_refresh(self):
        """Check if credentials need to be refreshed"""
        if not self.credentials or not self.expiration:
            return True
        
        # Add a buffer of 5 minutes before expiration
        now = datetime.now().replace(tzinfo=self.expiration.tzinfo)
        time_remaining = self.expiration - now
        return time_remaining.total_seconds() < 300  # Refresh if less than 5 minutes remaining

class DuckDBManager:
    def __init__(self, role_arn: str, region: str = 'us-east-1', cache_size_mb: int = 2000):
        """Initialize DuckDB connection with STS role assumption"""
        self.conn = duckdb.connect(database=':memory:')
        self.sts_manager = STSManager(role_arn, region)
        self._setup_connection(cache_size_mb)
        
    def _setup_connection(self, cache_size_mb: int):
        """Set up the DuckDB connection with extensions and optimizations"""
        # Install and load extensions (one-time operation)
        self.conn.execute("INSTALL httpfs")
        self.conn.execute("LOAD httpfs")
        
        # Configure DuckDB performance settings
        self.conn.execute(f"SET memory_limit='{cache_size_mb}MB'")
        self.conn.execute("SET enable_object_cache=true")
        
        # Set initial S3 credentials
        self._update_credentials()
    
    def _update_credentials(self):
        """Update the S3 credentials in DuckDB using STS"""
        credentials = self.sts_manager.get_credentials()
        
        # Configure S3 credentials in DuckDB
        self.conn.execute(f"SET s3_region='{self.sts_manager.region}'")
        self.conn.execute(f"SET s3_access_key_id='{credentials['aws_access_key_id']}'")
        self.conn.execute(f"SET s3_secret_access_key='{credentials['aws_secret_access_key']}'")
        self.conn.execute(f"SET s3_session_token='{credentials['aws_session_token']}'")
        
    def execute_query(self, query: str, params: Optional[Dict] = None) -> tuple[pd.DataFrame, Dict]:
        """Execute a query with automatic credential refresh"""
        # Refresh credentials if needed before executing query
        self._update_credentials()
        
        start_time = time.time()
        
        try:
            # Execute query with parameters if provided
            if params:
                result = self.conn.execute(query, params).df()
            else:
                result = self.conn.execute(query).df()
            
            query_time = time.time() - start_time
            
            # Simple metrics
            metrics = {
                "query_time_ms": round(query_time * 1000, 2)
            }
            
            return result, metrics
            
        except Exception as e:
            print(f"Query execution failed: {str(e)}")
            raise

# FastAPI Application
app = FastAPI()

# Initialize DuckDB manager with role ARN
role_config = {
    'role_arn': 'arn:aws:iam::123456789012:role/S3AccessRole',
    'region': 'us-east-1'
}

# Create the DB manager once at application startup
db_manager = DuckDBManager(
    role_arn=role_config['role_arn'],
    region=role_config['region']
)

@app.get("/query")
async def execute_query(query: str, params: Optional[Dict] = None):
    """Execute a query against S3 Parquet files with STS credentials"""
    try:
        # Execute query using the existing connection
        result, metrics = db_manager.execute_query(query, params)
        
        return {
            "status": "success",
            "data": result.to_dict(orient='records'),
            "metrics": metrics,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/example/point-query")
async def point_query_example(id: int = 123):
    """Example of a point query by ID"""
    query = f"""
    SELECT *
    FROM read_parquet('s3://your-bucket/data.parquet')
    WHERE id = {id}
    LIMIT 1
    """
    return await execute_query(query)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
