import requests
import time
import threading

class TokenManager:
    def __init__(self, auth_url, client_id, client_secret, buffer_seconds=30):
        self.auth_url = auth_url
        self.client_id = client_id
        self.client_secret = client_secret
        self.buffer_seconds = buffer_seconds
        self.access_token = None
        self.expiry_time = None
        self._timer = None

    def _fetch_token(self):
        response = requests.post(self.auth_url, json={
            "client_id": self.client_id,
            "client_secret": self.client_secret
        })
        data = response.json()
        self.access_token = data['access_token']
        expires_in = data['expires_in']  # typically in seconds
        self.expiry_time = time.time() + expires_in

        print(f"New token: {self.access_token} (valid for {expires_in} seconds)")

        # Schedule next refresh
        self._schedule_refresh(expires_in)

    def _schedule_refresh(self, expires_in):
        refresh_in = max(0, expires_in - self.buffer_seconds)
        if self._timer:
            self._timer.cancel()
        self._timer = threading.Timer(refresh_in, self._fetch_token)
        self._timer.start()

    def start(self):
        self._fetch_token()

    def stop(self):
        if self._timer:
            self._timer.cancel()

    def get_token(self):
        return self.access_token

# Example usage
if __name__ == "__main__":
    tm = TokenManager(
        auth_url="https://example.com/api/token",
        client_id="your_client_id",
        client_secret="your_client_secret"
    )
    tm.start()

    try:
        while True:
            print(f"Using token: {tm.get_token()}")
            time.sleep(10)
    except KeyboardInterrupt:
        tm.stop()
