import requests
import time
import threading

class TokenManager:
    def __init__(self, auth_url, client_id, client_secret, buffer_seconds=30):
        self.auth_url = auth_url
        self.client_id = client_id
        self.client_secret = client_secret
        self.buffer_seconds = buffer_seconds
        self.access_token = None
        self.expiry_time = 0
        self._stop_event = threading.Event()
        self._thread = None

    def _refresh_loop(self):
        while not self._stop_event.is_set():
            self._fetch_token()

            sleep_time = max(5, self.expiry_time - time.time() - self.buffer_seconds)
            if self._stop_event.wait(timeout=sleep_time):
                break

    def _fetch_token(self):
        response = requests.post(self.auth_url, json={
            "client_id": self.client_id,
            "client_secret": self.client_secret
        })
        data = response.json()
        self.access_token = data['access_token']
        expires_in = data['expires_in']
        self.expiry_time = time.time() + expires_in

        print(f"New token: {self.access_token} (valid for {expires_in} seconds)")

    def start(self):
        self._thread = threading.Thread(target=self._refresh_loop, daemon=True)
        self._thread.start()

    def stop(self):
        self._stop_event.set()
        if self._thread:
            self._thread.join()

    def get_token(self):
        return self.access_token

# Example usage
if __name__ == "__main__":
    tm = TokenManager(
        auth_url="https://example.com/api/token",
        client_id="your_client_id",
        client_secret="your_client_secret"
    )
    tm.start()

    for _ in range(5):
        print(f"Using token: {tm.get_token()}")
        time.sleep(10)

    tm.stop()
