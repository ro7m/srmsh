from cryptography.hazmat.primitives.ciphers.aead import AESGCM
import os
import base64
import struct

def encrypt_image(image_data, key):
    # Generate a random 96-bit IV/nonce (12 bytes)
    nonce = os.urandom(12)
    
    # Create an AESGCM instance with your key
    aesgcm = AESGCM(key)
    
    # Encrypt the data
    encrypted_data = aesgcm.encrypt(nonce, image_data, None)
    
    # Format: nonce (12 bytes) + encrypted data
    return nonce + encrypted_data

def decrypt_image(combined_data, key):
    # Extract nonce (first 12 bytes)
    nonce = combined_data[:12]
    # Extract encrypted data (remaining bytes)
    encrypted_data = combined_data[12:]
    
    # Create an AESGCM instance with your key
    aesgcm = AESGCM(key)
    
    # Decrypt the data
    decrypted_data = aesgcm.decrypt(nonce, encrypted_data, None)
    
    return decrypted_data
