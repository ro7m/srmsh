// pubspec.yaml
name: flutter_ocr_app
description: A Flutter OCR app using camera and ONNX models
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: ">=2.17.0 <3.0.0"

dependencies:
  flutter:
    sdk: flutter
  camera: ^0.10.5
  path_provider: ^2.1.1
  path: ^1.8.3
  permission_handler: ^10.4.3
  image_picker: ^1.0.4

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:
  uses-material-design: true

// lib/main.dart
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'screens/camera_screen.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final cameras = await availableCameras();
  runApp(MyApp(cameras: cameras));
}

class MyApp extends StatelessWidget {
  final List<CameraDescription> cameras;
  
  const MyApp({Key? key, required this.cameras}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter OCR App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: CameraScreen(cameras: cameras),
    );
  }
}

// lib/screens/camera_screen.dart
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' show join;
import 'package:permission_handler/permission_handler.dart';
import 'preview_screen.dart';

class CameraScreen extends StatefulWidget {
  final List<CameraDescription> cameras;

  const CameraScreen({Key? key, required this.cameras}) : super(key: key);

  @override
  CameraScreenState createState() => CameraScreenState();
}

class CameraScreenState extends State<CameraScreen> {
  late CameraController _controller;
  late Future<void> _initializeControllerFuture;
  bool _isCameraPermissionGranted = false;

  @override
  void initState() {
    super.initState();
    _requestCameraPermission();
    _initializeCamera();
  }

  Future<void> _requestCameraPermission() async {
    final status = await Permission.camera.request();
    setState(() {
      _isCameraPermissionGranted = status == PermissionStatus.granted;
    });
  }

  Future<void> _initializeCamera() async {
    _controller = CameraController(
      widget.cameras[0],
      ResolutionPreset.medium,
    );
    _initializeControllerFuture = _controller.initialize();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _takePicture() async {
    try {
      await _initializeControllerFuture;
      final path = join(
        (await getTemporaryDirectory()).path,
        '${DateTime.now()}.png',
      );
      
      final image = await _controller.takePicture();
      
      if (!mounted) return;

      await Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => PreviewScreen(
            imagePath: image.path,
          ),
        ),
      );
    } catch (e) {
      print(e);
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!_isCameraPermissionGranted) {
      return const Center(child: Text('Camera permission not granted'));
    }

    return Scaffold(
      appBar: AppBar(title: const Text('Take a Picture')),
      body: FutureBuilder<void>(
        future: _initializeControllerFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            return CameraPreview(_controller);
          } else {
            return const Center(child: CircularProgressIndicator());
          }
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _takePicture,
        child: const Icon(Icons.camera_alt),
      ),
    );
  }
}

// lib/screens/preview_screen.dart
import 'dart:io';
import 'package:flutter/material.dart';
import '../services/ocr_service.dart';

class PreviewScreen extends StatefulWidget {
  final String imagePath;

  const PreviewScreen({Key? key, required this.imagePath}) : super(key: key);

  @override
  PreviewScreenState createState() => PreviewScreenState();
}

class PreviewScreenState extends State<PreviewScreen> {
  late Future<String> _extractedText;
  final OCRService _ocrService = OCRService();

  @override
  void initState() {
    super.initState();
    _extractedText = _ocrService.extractText(widget.imagePath);
  }

  void _retryOCR() {
    setState(() {
      _extractedText = _ocrService.extractText(widget.imagePath);
    });
  }

  void _acceptResult() {
    // Handle the accepted result (e.g., save to database, navigate back, etc.)
    Navigator.of(context).pop();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Preview & OCR Result')),
      body: Column(
        children: [
          Expanded(
            flex: 1,
            child: Image.file(
              File(widget.imagePath),
              fit: BoxFit.contain,
            ),
          ),
          Expanded(
            flex: 1,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: FutureBuilder<String>(
                future: _extractedText,
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  } else if (snapshot.hasError) {
                    return Center(child: Text('Error: ${snapshot.error}'));
                  } else {
                    return Column(
                      children: [
                        Expanded(
                          child: SingleChildScrollView(
                            child: Text(
                              snapshot.data ?? 'No text extracted',
                              style: const TextStyle(fontSize: 18),
                            ),
                          ),
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            ElevatedButton(
                              onPressed: _retryOCR,
                              child: const Text('Retry'),
                            ),
                            ElevatedButton(
                              onPressed: _acceptResult,
                              child: const Text('Accept'),
                            ),
                          ],
                        ),
                      ],
                    );
                  }
                },
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// lib/services/ocr_service.dart
class OCRService {
  Future<List<List<int>>> detectText(String imagePath) async {
    // TODO: Implement ONNX detection model
    // This is a dummy implementation returning fake bounding boxes
    await Future.delayed(const Duration(seconds: 1)); // Simulate processing time
    return [
      [100, 100, 200, 150], // [x1, y1, x2, y2]
      [300, 200, 400, 250],
    ];
  }

  Future<String> recognizeText(String imagePath, List<List<int>> boundingBoxes) async {
    // TODO: Implement ONNX recognition model
    // This is a dummy implementation returning fake text
    await Future.delayed(const Duration(seconds: 1)); // Simulate processing time
    return 'Sample extracted text.\nThis is a placeholder for the actual OCR result.';
  }

  Future<String> extractText(String imagePath) async {
    try {
      // Step 1: Detect text regions
      final boundingBoxes = await detectText(imagePath);
      
      // Step 2: Recognize text in detected regions
      final extractedText = await recognizeText(imagePath, boundingBoxes);
      
      return extractedText;
    } catch (e) {
      return 'Error extracting text: $e';
    }
  }
}
