import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'screens/camera_screen.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/services.dart';
import 'dart:io';
import 'dart:convert';

bool isSimulator() {
  if (!Platform.isIOS) return false;
  return !Platform.isPhysicalDevice;
}

Future<void> main() async {
  try {
    WidgetsFlutterBinding.ensureInitialized();
    
    // Check if running on simulator
    final bool isSimulatorDevice = isSimulator();
    
    if (isSimulatorDevice) {
      // For simulator, create a mock camera list with one camera
      final mockCamera = CameraDescription(
        name: 'Mock Camera',
        lensDirection: CameraLensDirection.back,
        sensorOrientation: 0,
      );
      runApp(MyApp(cameras: [mockCamera]));
      return;
    }

    // For real devices, get actual cameras
    final cameras = await availableCameras();

    if (cameras.isEmpty) {
      print('No cameras found');
      runApp(const MyAppError(error: 'No cameras available'));
    } else {
      runApp(MyApp(cameras: cameras));
    }
  } catch (e) {
    print('Error initializing app: $e');
    runApp(MyAppError(error: e.toString()));
  }
}

// Rest of the code remains the same...
// Add to iOS native code (ios/Runner/AppDelegate.swift)
private func setupMethodChannel(_ controller: FlutterViewController) {
    let channel = FlutterMethodChannel(
        name: "flutter_device_type",
        binaryMessenger: controller.binaryMessenger)
    
    channel.setMethodCallHandler { call, result in
        if call.method == "isRealDevice" {
            #if targetEnvironment(simulator)
            result("false")
            #else
            result("true")
            #endif
        } else {
            result(FlutterMethodNotImplemented)
        }
    }
}


----

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';
import 'package:camera/camera.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' show join;
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';
import 'preview_screen.dart';

// Rest of the CornerEdgesPainter class remains the same...
// [Previous CornerEdgesPainter implementation]

class CameraScreen extends StatefulWidget {
  final List<CameraDescription> cameras;

  const CameraScreen({Key? key, required this.cameras}) : super(key: key);

  @override
  CameraScreenState createState() => CameraScreenState();
}

class CameraScreenState extends State<CameraScreen> {
  late CameraController? _controller;
  late Future<void> _initializeControllerFuture;
  bool _isCameraPermissionGranted = false;
  double _minZoomLevel = 1.0;
  double _maxZoomLevel = 1.0;
  double _currentZoomLevel = 1.0;
  bool _isSimulator = false;

  @override
  void initState() {
    super.initState();
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    _checkSimulator();
  }

  Future<void> _checkSimulator() async {
    if (Platform.isIOS) {
      _isSimulator = !await _isRealDevice();
    }
    
    if (_isSimulator) {
      setState(() {
        _isCameraPermissionGranted = true;
      });
    } else {
      await _requestCameraPermission();
    }
  }

  Future<bool> _isRealDevice() async {
    try {
      final String result = await const MethodChannel('flutter_device_type')
          .invokeMethod('isRealDevice');
      return result == "true";
    } on PlatformException catch (_) {
      return false;
    }
  }

  @override
  void dispose() {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.landscapeRight,
    ]);
    _controller?.dispose();
    super.dispose();
  }

  Future<void> _requestCameraPermission() async {
    final status = await Permission.camera.request();
    setState(() {
      _isCameraPermissionGranted = status == PermissionStatus.granted;
    });
    if (_isCameraPermissionGranted) {
      await _initializeCamera();
    }
  }

  Future<void> _initializeCamera() async {
    if (_isSimulator) return;

    _controller = CameraController(
      widget.cameras[0],
      ResolutionPreset.high,
      enableAudio: false,
    );
    
    _initializeControllerFuture = _controller!.initialize().then((_) async {
      if (!mounted) return;
      
      _minZoomLevel = await _controller!.getMinZoomLevel();
      _maxZoomLevel = await _controller!.getMaxZoomLevel();
      
      setState(() {});
    });
  }

  Future<XFile> _getSimulatorImage() async {
    // Copy asset image to temporary directory
    final ByteData data = await rootBundle.load('assets/sample_document.jpg');
    final String path = join(
      (await getTemporaryDirectory()).path,
      'sample_document.jpg',
    );
    
    final File file = File(path);
    await file.writeAsBytes(data.buffer.asUint8List());
    
    return XFile(path);
  }

  Future<void> _takePicture() async {
    try {
      if (_isSimulator) {
        final XFile mockImage = await _getSimulatorImage();
        if (!mounted) return;

        await Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => PreviewScreen(
              image: mockImage,
            ),
          ),
        );
        return;
      }

      await _initializeControllerFuture;
      final image = await _controller!.takePicture();
      
      if (!mounted) return;

      await Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => PreviewScreen(
            image: image,
          ),
        ),
      );
    } catch (e) {
      print(e);
    }
  }

  Future<void> _setZoomLevel(double value) async {
    if (_isSimulator) return;
    
    setState(() {
      _currentZoomLevel = value;
    });
    await _controller?.setZoomLevel(value);
  }

  Widget _buildCameraPreview() {
    if (_isSimulator) {
      return Image.asset(
        'assets/sample_document.jpg',
        fit: BoxFit.cover,
      );
    }

    return FutureBuilder<void>(
      future: _initializeControllerFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return CameraPreview(_controller!);
        } else {
          return const Center(child: CircularProgressIndicator());
        }
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    if (!_isCameraPermissionGranted && !_isSimulator) {
      return const Center(child: Text('Camera permission not granted'));
    }

    final screenSize = MediaQuery.of(context).size;
    final cameraHeight = screenSize.height * 0.7;
    final cameraWidth = screenSize.width * 0.9;

    return Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Stack(
          alignment: Alignment.center,
          children: [
            // Camera Preview or Simulator Image
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: SizedBox(
                width: cameraWidth,
                height: cameraHeight,
                child: FittedBox(
                  fit: BoxFit.cover,
                  child: SizedBox(
                    width: cameraWidth,
                    height: cameraHeight,
                    child: _buildCameraPreview(),
                  ),
                ),
              ),
            ),

            // Rest of the widgets remain the same...
            // [Previous Stack children implementation]
          ],
        ),
      ),
    );
  }
}
