import 'package:flutter/material.dart';
import 'dart:ui' as ui;
import 'dart:io';
import 'package:image_picker/image_picker.dart';

// Bounding Box Model
class BoundingBox {
  final List<List<double>>? coordinates;
  final Map<String, dynamic>? config;

  BoundingBox({this.coordinates, this.config});
}

// Bounding Box Painter
class BoundingBoxPainter extends CustomPainter {
  final ui.Image image;
  final List<BoundingBox> boundingBoxes;
  final Size screenSize;

  BoundingBoxPainter({
    required this.image,
    required this.boundingBoxes,
    required this.screenSize,
  });

  @override
  void paint(Canvas canvas, Size size) {
    // Calculate scale factors to fit image to screen while maintaining aspect ratio
    double scaleX = screenSize.width / image.width;
    double scaleY = screenSize.height / image.height;
    double scale = scaleX < scaleY ? scaleX : scaleY;

    // Calculate centered position
    double left = (screenSize.width - (image.width * scale)) / 2;
    double top = (screenSize.height - (image.height * scale)) / 2;

    // Draw the image
    final rect = Rect.fromLTWH(left, top, image.width * scale, image.height * scale);
    canvas.drawImage(image, rect.topLeft, Paint());

    // Draw bounding boxes
    for (var box in boundingBoxes) {
      if (box.coordinates != null) {
        final paint = Paint()
          ..style = PaintingStyle.stroke
          ..strokeWidth = 2.0
          ..color = _parseColor(box.config?['stroke'] ?? '#FF0000');

        final path = Path();
        bool isFirst = true;
        
        for (var coord in box.coordinates!) {
          final double x = (coord[0] * image.width * scale) + left;
          final double y = (coord[1] * image.height * scale) + top;
          
          if (isFirst) {
            path.moveTo(x, y);
            isFirst = false;
          } else {
            path.lineTo(x, y);
          }
        }
        
        path.close();
        canvas.drawPath(path, paint);
      }
    }
  }

  Color _parseColor(String colorStr) {
    try {
      if (colorStr.startsWith('#')) {
        colorStr = colorStr.substring(1);
      }
      if (colorStr.length == 6) {
        return Color(int.parse('FF$colorStr', radix: 16));
      }
      return Colors.red;
    } catch (e) {
      return Colors.red;
    }
  }

  @override
  bool shouldRepaint(BoundingBoxPainter oldDelegate) {
    return oldDelegate.image != image || 
           oldDelegate.boundingBoxes != boundingBoxes ||
           oldDelegate.screenSize != screenSize;
  }
}

// Preview Screen
class PreviewScreen extends StatefulWidget {
  final XFile image;

  const PreviewScreen({Key? key, required this.image}) : super(key: key);

  @override
  _PreviewScreenState createState() => _PreviewScreenState();
}

class _PreviewScreenState extends State<PreviewScreen> {
  List<BoundingBox> _boundingBoxes = [];
  String _extractedText = '';
  ui.Image? _decodedImage;
  bool _isProcessing = true;
  String _debugText = '';

  @override
  void initState() {
    super.initState();
    _processImage();
  }

  void _addDebugMessage(String message) {
    setState(() {
      _debugText += '$message\n';
    });
    print(message);
  }

  Future<void> _processImage() async {
    try {
      setState(() {
        _isProcessing = true;
      });

      // Load and decode the image
      final imageBytes = await widget.image.readAsBytes();
      final ui.Codec codec = await ui.instantiateImageCodec(imageBytes);
      final ui.FrameInfo frameInfo = await codec.getNextFrame();
      
      setState(() {
        _decodedImage = frameInfo.image;
      });

      // Process OCR here and update _boundingBoxes and _extractedText
      // Add your OCR processing logic here
      
    } catch (e, stackTrace) {
      _addDebugMessage('Error: $e\n$stackTrace');
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    
    return Scaffold(
      appBar: AppBar(
        title: const Text('OCR Preview'),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          if (_decodedImage != null)
            CustomPaint(
              painter: BoundingBoxPainter(
                image: _decodedImage!,
                boundingBoxes: _boundingBoxes,
                screenSize: size,
              ),
              size: size,
            )
          else if (!_isProcessing)
            Image.file(
              File(widget.image.path),
              fit: BoxFit.contain,
            ),
          if (_isProcessing)
            const Center(
              child: CircularProgressIndicator(),
            ),
          if (_extractedText.isNotEmpty)
            Positioned(
              bottom: 20,
              left: 20,
              right: 20,
              child: Container(
                padding: const EdgeInsets.all(8),
                color: Colors.black.withOpacity(0.7),
                child: Text(
                  _extractedText,
                  style: const TextStyle(color: Colors.white),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
